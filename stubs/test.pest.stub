<?php

use App\Models\{{ modelName }};
use Illuminate\Support\Facades\Artisan;

use function Pest\Laravel\artisan;



beforeEach(function(){
    $this->factory = getFactory();
    $this->factory->createUser();
    $this->factory->create{{ modelName }}();
    $this->withHeaders([
        'Accept' => 'application/json',
        'Content-Type' => 'application/json',
        'Authorization' => 'Bearer '.$this->factory->getToken(),
    ]);

});


it('returns a paginated response of {{ model }}s', function () {
    $response = $this->getJson(apiPrefix('{{ model }}s'));
    expect($response->status())->toBe(200);
    expect($response->getContent())
    ->toBeJson();
    expect($response->json())
    ->toHaveKeys(['data','meta']);
    expect($response->getContent())
    ->json()
    ->meta
    ->toBePaginatorResponse();
});

it('Returns an array of {{ model }}s with there name when fetching dropdown', function () {
    $response = $this->getJson(apiPrefix('{{ model }}s/dropdown'));
    expect($response->status())->toBe(200);
    expect($response->getContent())
    ->toBeJson();
});


it('Returns an array of {{ model }} status', function () {
    ${{ model }}Id = $this->factory::${{ model }}->id;
    $response = $this->getJson(apiPrefix('{{ model }}s/status/dropdown'));
    expect($response->status())->toBe(200);
    expect($response->getContent())
    ->toBeJson();
});

it('Returns a single {{ model }} with valid Id', function () {
    ${{ model }}Id = $this->factory::${{ model }}->id;
    $response = $this->getJson(apiPrefix('{{ model }}s/'.${{ model }}Id));
    expect($response->status())->toBe(200);
    expect($response->getContent())
    ->toBeJson();
    expect($response->json())
    ->toHaveKeys([
        'name',
        'description',
    ]);
});


it('Returns a 404 when single {{ model }} is fetched with invalid Id', function () {
    ${{ model }}Id = rand(999999,9999999);
    $response = $this->getJson(apiPrefix('{{ model }}s/'.${{ model }}Id));
    expect($response->status())->toBe(404);
    expect($response->getContent())
    ->toBeJson();
    expect($response->json())
    ->toHaveKeys(['error']);
});


it('Returns a 422 when single {{ model }} is being created with incorrect data', function () {
    $response = $this->postJson(apiPrefix('{{ model }}s'));
    expect($response->status())->toBe(422);
    expect($response->getContent())
    ->toBeJson();
    expect($response->json())
    ->toHaveKeys(['errors','message']);
});


it('Returns a 422 when single {{ model }} is being updated with incorrect data', function () {
    ${{ model }}Id = $this->factory::${{ model }}->id;
    $response = $this->patchJson(apiPrefix('{{ model }}s/'.${{ model }}Id),[]);
    expect($response->status())->toBe(422);
    expect($response->getContent())
    ->toBeJson();
    expect($response->json())
    ->toHaveKeys(['errors','message']);
});



it('Returns a 200 when single {{ model }} is created', function () {
    $this->factory->make{{ modelName }}();
    $response = $this->postJson(apiPrefix('{{ model }}s'),$this->factory::${{ model }}->toArray());
    expect($response->status())->toBe(200);
    expect($response->getContent())
    ->toBeJson();
    expect($response->json())
    ->toHaveKeys([
        'name',
        'description',
    ]);
    expect($response->json())
    ->not->toHaveKeys(['errors','message']);
});


it('Returns a 200 when single {{ model }} is updated', function () {
    $old{{ modelName }} = $this->factory::${{ model }};
    $old{{ modelName }}Id = $old{{ modelName }}->id;
    $this->factory->make{{ modelName }}();
    $response = $this->patchJson(apiPrefix('{{ model }}s/'.$old{{ modelName }}Id),$this->factory::${{ model }}->toArray());
    expect($response->status())->toBe(200);
    expect($response->getContent())
    ->toBeJson();
    expect($response->json())
    ->toHaveKeys([
        'name',
        'description',
    ]);

    expect($response->getContent())
    ->json()
    ->name->not->toBe($old{{ modelName }}->name);

    expect($response->json())
    ->not->toHaveKeys(['errors','message']);
});

it('Returns a 204 when single {{ model }} is delete', function () {
    ${{ model }}Id = $this->factory::${{ model }}->id;
    $response = $this->deleteJson(apiPrefix('{{ model }}s/'.${{ model }}Id));
    expect($response->status())->toBe(204);
    expect($response->getContent())
    ->toBe('');

    expect({{ modelName }}::find(${{ model }}Id))
    ->toBeNull();
});
